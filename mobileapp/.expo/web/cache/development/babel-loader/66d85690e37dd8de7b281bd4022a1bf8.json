{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/daniel/Desktop/myProjects/fintracker/mobileapp/src/navigation/AppNavigator.js\";\nimport React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { createSwitchNavigator, NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { style } from \"../../assets/styles/signinStyles\";\nimport Login from \"../loginComponents/Login\";\n\nvar LoginScreen = function (_React$Component) {\n  _inherits(LoginScreen, _React$Component);\n\n  function LoginScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoginScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoginScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onLogin = function () {};\n\n    return _this;\n  }\n\n  _createClass(LoginScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Login, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        }\n      });\n    }\n  }]);\n\n  return LoginScreen;\n}(React.Component);\n\nLoginScreen.navigationOptions = {\n  header: null\n};\n\nvar AuthLoadingScreen = function (_React$Component2) {\n  _inherits(AuthLoadingScreen, _React$Component2);\n\n  function AuthLoadingScreen() {\n    var _this2;\n\n    _classCallCheck(this, AuthLoadingScreen);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AuthLoadingScreen).call(this));\n\n    _this2.checkLoginStatus = function _callee() {\n      var userToken;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('signedIn'));\n\n            case 2:\n              userToken = _context.sent;\n\n              _this2.props.navigation.navigate(userToken ? 'App' : 'Auth');\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this2.checkLoginStatus();\n\n    return _this2;\n  }\n\n  _createClass(AuthLoadingScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: style.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        }\n      }, React.createElement(ActivityIndicator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        }\n      }));\n    }\n  }]);\n\n  return AuthLoadingScreen;\n}(React.Component);\n\nvar AuthStack = createStackNavigator({\n  Login: Login\n});\nexport default createAppContainer(createSwitchNavigator({\n  AuthLoading: AuthLoadingScreen,\n  Auth: AuthStack\n}, {\n  initialRouteName: 'AuthLoading'\n}));","map":{"version":3,"sources":["/Users/daniel/Desktop/myProjects/fintracker/mobileapp/src/navigation/AppNavigator.js"],"names":["React","createSwitchNavigator","NavigationContainer","createStackNavigator","style","Login","LoginScreen","onLogin","Component","navigationOptions","header","AuthLoadingScreen","checkLoginStatus","AsyncStorage","getItem","userToken","props","navigation","navigate","container","AuthStack","createAppContainer","AuthLoading","Auth","initialRouteName"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AAGA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,0BAA3D;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAEA,SAASC,KAAT;AAGA,OAAOC,KAAP;;IAGMC,W;;;;;;;;;;;;;;;;UAOJC,O,GAAU,YAAM,CAEf,C;;;;;;;6BALQ;AACP,aAAO,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EANuBP,KAAK,CAACQ,S;;AAA1BF,W,CACGG,iB,GAAoB;AACzBC,EAAAA,MAAM,EAAE;AADiB,C;;IAYvBC,iB;;;AACJ,+BAAc;AAAA;;AAAA;;AACZ;;AADY,WAIdC,gBAJc,GAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACOC,YAAY,CAACC,OAAb,CAAqB,UAArB,CADP;;AAAA;AACXC,cAAAA,SADW;;AAEjB,qBAAKC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+BH,SAAS,GAAG,KAAH,GAAW,MAAnD;;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJL;;AAEZ,WAAKH,gBAAL;;AAFY;AAGb;;;;6BAMQ;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAER,KAAK,CAACe,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;;EAhB6BnB,KAAK,CAACQ,S;;AAmBtC,IAAMY,SAAS,GAAGjB,oBAAoB,CAAC;AAAEE,EAAAA,KAAK,EAAEA;AAAT,CAAD,CAAtC;AAEA,eAAegB,kBAAkB,CAACpB,qBAAqB,CACrD;AACEqB,EAAAA,WAAW,EAAEX,iBADf;AAEEY,EAAAA,IAAI,EAAEH;AAFR,CADqD,EAKrD;AACEI,EAAAA,gBAAgB,EAAE;AADpB,CALqD,CAAtB,CAAjC","sourcesContent":["import React from 'react';\nimport { ActivityIndicator, AsyncStorage, Button, StatusBar, View } from 'react-native';\n\nimport { createSwitchNavigator, NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport { style } from \"../../assets/styles/signinStyles\";\n\n\nimport Login from '../loginComponents/Login';\n\n\nclass LoginScreen extends React.Component {\n  static navigationOptions = {\n    header: null,\n  };\n  render() {\n    return <Login />\n  }\n  onLogin = () => {\n    // this.props.navigation.navigate('App'); };\n  }\n}\n\n// Auth Loading Screen\nclass AuthLoadingScreen extends React.Component {\n  constructor() {\n    super();\n    this.checkLoginStatus();\n  }\n  checkLoginStatus = async () => {\n    const userToken = await AsyncStorage.getItem('signedIn');\n    this.props.navigation.navigate(userToken ? 'App' : 'Auth');\n  };\n\n  render() {\n    return (\n      <View style={style.container}>\n        <ActivityIndicator />\n      </View>\n    );\n  }\n}\n\nconst AuthStack = createStackNavigator({ Login: Login });\n\nexport default createAppContainer(createSwitchNavigator(\n  {\n    AuthLoading: AuthLoadingScreen,\n    Auth: AuthStack,\n  },\n  {\n    initialRouteName: 'AuthLoading',\n  }\n));"]},"metadata":{},"sourceType":"module"}